{"0": {
    "doc": "API Design",
    "title": "API Design:",
    "content": ". The api is designed so that the user can access the following models as well as the output path for the program: . @dataclass class DataHolder: gene_name: str chromosome: int affected_inds: dict[str, list[str]] phenotype_prevalence: dict[str, float] phenotype_cols: list[str] ibd_program: str phenotype_description: None | dict[str, str] = None @dataclass class Pairs: pair_1: str phase_1: str pair_2: str phase_2: str chromosome: int segment_start: int segment_end: int length: float def form_id_str(self) -&gt; str: \"\"\"Method that will return the pair ids and phases in a formated string\"\"\" return f\"{self.pair_1}\\t{self.pair_2}\\t{self.phase_1}\\t{self.phase_2}\" def form_segment_info_str(self) -&gt; str: \"\"\"Method that will return a string with all of the segment info\"\"\" return f\"{self.segment_start}\\t{self.segment_end}\\t{self.length}\\n\" @dataclass class Network: gene_name: str gene_chr: str network_id: int pairs: list[Pairs] = field(default_factory=list) iids: set[str] = field(default_factory=set) haplotypes: set[str] = field(default_factory=set) connections: dict[str, int] = field(default_factory=dict) pvalues: None | str = None . The api will supply three values: “data”, “network”, “output” which are represented by the DataHolder model, the Network model, and the gene output path respectively. You can access each of these values through the kwargs. These attributes and methods of each model are described below. ",
    "url": "/documentation/api_design.html#api-design",
    "relUrl": "/documentation/api_design.html#api-design"
  },"1": {
    "doc": "API Design",
    "title": "DataHolder:",
    "content": ". The attributes for the DataHolder model are described below: . | gene_name - string that contains the gene name that was passed to the program in the gene_info file . | chromosome - integer number for the chromosome of interest . | affected_inds - dictionary where the keys are a string for each PheCode and the values are a list of IDs that are affected by the phenotype. | phenotype_prevalence - dictionary where the keys are a PheCode string and the values are the percentages of individuals that are affected by the phenotype in the population you provided. | phenotype_cols - list of PheCode strings in the provided PheCode matrix. | ibd_program - this is a string that gives the name of the ibd program being used. | phenotype_description - This attribute is either none if the user didn’t provide a file that has descriptions of each PheCode or it is a dictionary where the keys are PheCode strings and the values are the description of each PheCode. | . ",
    "url": "/documentation/api_design.html#dataholder",
    "relUrl": "/documentation/api_design.html#dataholder"
  },"2": {
    "doc": "API Design",
    "title": "Pairs:",
    "content": ". The attributes for the Pairs model are described below: . | pair_1 - string that contains the ID of the first person in the pair that shares an IBD segment. | phase_1 - string that contains ID and the phase number of pair_1’s haplotype which contains the shared IBD segment. This values is the pair ID concatenated with the phase value. Ex: ID1 becomes ID1.1 for the first haplotype (Different ibd detection programs use different numbers to represent haplotypes. The example above is based on hap-IBD). | pair_2 - string that contains the ID of the second person in the pair that shares an IBD segment. | phase_2 - string that contains the ID and the phase number of pair_2’s haplotype which contains the shared IBD segment. This values is the pair ID concatenated with the phase value. Ex: ID2 becomes ID2.2 for the second haplotype (Different ibd detection programs use different numbers to represent haplotypes. The example above is based on hap-IBD). | chromosome - integer number of the chromosome that the shared segment is on. | segment_start - integer that has the start base position of the shared segment. | segment_end - integer that has the end base position of the shared segment. | length - float value that has the total length of the segments in centimorgans. | . The methods for the Pairs model are described below: . | form_id_str - method that creates a string with tab separated values that has the pair_1 ID string, the pair_2 ID string, the phase_1 string, and the phase_2 string, respectively. | form_segment_info_str - method that creates a string with tab separated values that has the segment start position, the segment end position, and the length of the segment, respectively. | . ",
    "url": "/documentation/api_design.html#pairs",
    "relUrl": "/documentation/api_design.html#pairs"
  },"3": {
    "doc": "API Design",
    "title": "Network:",
    "content": ". The attributes for the Network model are described below: . | gene_name - string that contains the gene name that was passed to the program in the gene_info file. | gene_chr - integer that has the chromosome number that the gene is on. | network_id - integer that has the id for the network in the analysis. | pairs - list of Pair objects that have information about the ibd segment that each id pair shares. | iids - a set that has all the unique iid strings that are in the network. | haplotypes - a set that has all the unique haplotypes in the network. The unique haplotypes are just the ID with the phase information appended to it. Ex: ID1 becomes ID1.1. This attribute allows us to differentiate between which haplotype is in the network. | connections - a dictionary where the keys are the individual grid strings and the values are the number of other individuals that the ID is connected to. | pvalues - This value is either None or it is a string of tab separated values where the first three values are the most significant p-value, the corresponding PheCode, and then the corresponding PheCode description respectively. The rest of the string are tab separated values for the p-value of each PheCode and how many individuals in the network are affected by the Phenotype. The default value for this attribute is None and the pvalue.py plugin actually adds the string to this attribute. The user could substitute there own statistically plugin if they wished and use this attribute, it just needs to meet the plugin requirements which are defined in the “Custom Pluging Design” section. | . ",
    "url": "/documentation/api_design.html#network",
    "relUrl": "/documentation/api_design.html#network"
  },"4": {
    "doc": "API Design",
    "title": "Output Path:",
    "content": ". The api also supplies the gene output path. This output path is formed by affixing the name of the gene of interest with the output path provided by the user to the CLI. The plugin needs to create the path to write information to. for example if you were running the gene rbm20, then this value would be: . /output_path_provided_by_user/rbm20/ . ",
    "url": "/documentation/api_design.html#output-path",
    "relUrl": "/documentation/api_design.html#output-path"
  },"5": {
    "doc": "API Design",
    "title": "API Design",
    "content": " ",
    "url": "/documentation/api_design.html",
    "relUrl": "/documentation/api_design.html"
  },"6": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": "Coming soon . ",
    "url": "/changelog.html",
    "relUrl": "/changelog.html"
  },"7": {
    "doc": "Customization",
    "title": "Customizing the IBDCluster network analysis:",
    "content": ". This program was built so that individuals can bring in custom analysis scripts using plugins. This allows flexibility for what enrichment test the user wishes to use as well as what information they would like to keep to output files. Three defaults plugins are provided and are used: pvalues.py, network_writer.py, allpair_writer.py. These plugins will be discussed in more detail later. The following sections will discuss the api design, the stock plugins, and how the user can design their own plugin. ",
    "url": "/documentation/customization.html#customizing-the-ibdcluster-network-analysis",
    "relUrl": "/documentation/customization.html#customizing-the-ibdcluster-network-analysis"
  },"8": {
    "doc": "Customization",
    "title": "Customization",
    "content": " ",
    "url": "/documentation/customization.html",
    "relUrl": "/documentation/customization.html"
  },"9": {
    "doc": "Custom Pluging Design",
    "title": "Designing your own plugin:",
    "content": ". When you install the program you need to add two environmental variables to your .bashrc file (or .zshrc or whatever shell you use). These two variables are the IBDCLUSTER_MAIN_PLUGINS and the IBDCLUSTER_CUSTOM_PLUGINS. The IBDCLUSTER_MAIN_PLUGINS has filepath to the directory with the stock plugins and then the IBDCLUSTER_CUSTOM_PLUGINS has the filepath to the directory with the users custom plugins. These two directories can not have the same name or the program will not work. ",
    "url": "/documentation/design_your_own_plugin.html#designing-your-own-plugin",
    "relUrl": "/documentation/design_your_own_plugin.html#designing-your-own-plugin"
  },"10": {
    "doc": "Custom Pluging Design",
    "title": "Custom Pluging Design",
    "content": " ",
    "url": "/documentation/design_your_own_plugin.html",
    "relUrl": "/documentation/design_your_own_plugin.html"
  },"11": {
    "doc": "Docker Installation",
    "title": "Docker Installation",
    "content": "Coming soon . ",
    "url": "/documentation/docker.html",
    "relUrl": "/documentation/docker.html"
  },"12": {
    "doc": "Github Installation",
    "title": "Using Github to install IBDCluster:",
    "content": ". This installation method assumes that you are familiar with Git and Github, the commandline, and python’s Anaconda package manager and that these programs are install/can be install on whatever computing environment you are using. You will have to use all of these tools so you will need to be familiar enough with each one to run the example commands. If you wish to read the documentation for each of these then they will be listed below: . | Git: Git Website . | Github: Github Website . | Commandline Interface: This is probably overkill but here is a very indepth CLI tutorial . | Anaconda Anaconda Website . | . Optional Installation Dependency: You can also use poetry to install the program. Poetry is a python package manager (another alternative to Pip and Conda and all the other package manages) that has good dependency resolution to create a reproducible environment. You can read more about the project here Poetry documentation and the steps to install it are described here Poetry Installation. Poetry is the current recommended way to install the program but it relies on you having the necessary dependencies to install the Poetry program into whatever system you are using. People trying to run this on a personal machine (probably unlikely) should have no difficultly installing poetry but those running IBDCluster on a server (Which considering its made for BioBank data will be most people) may run into permission errors. If you are running into permission errors than the documentation will indicate where your installation instructions are different. ",
    "url": "/documentation/github.html#using-github-to-install-ibdcluster",
    "relUrl": "/documentation/github.html#using-github-to-install-ibdcluster"
  },"13": {
    "doc": "Github Installation",
    "title": "Steps to installing IBDCluster:",
    "content": "The installation process can be broken into 4 steps. These are listed below and will be explained in further detail: . | clone the Github repository to your local environment. | create and activate a conda virtual environment. | install all the dependencies using Conda or Poetry. | Add the program to you PATH so that you can call the program | . ",
    "url": "/documentation/github.html#steps-to-installing-ibdcluster",
    "relUrl": "/documentation/github.html#steps-to-installing-ibdcluster"
  },"14": {
    "doc": "Github Installation",
    "title": "Step 1: Clone the Github repository:",
    "content": "You can clone the Github repository into your local environment using the command shown below: . git clone https://github.com/jtb324/IBDCluster.git . You should now have a directory called IBDCluster. You can check if this exists using the command: . ls IBDCluster/ . If you see a directory file tree then the program cloned correctly. If you receive an error saying that the directory does not exist, then you will have to debug the error to move onto step 2. ",
    "url": "/documentation/github.html#step-1-clone-the-github-repository",
    "relUrl": "/documentation/github.html#step-1-clone-the-github-repository"
  },"15": {
    "doc": "Github Installation",
    "title": "Step 2: create and activate a conda virtual environment:",
    "content": "To create a conda virtual environment you just need to run the command below, replacing the name with whatever name you want to give the environment. conda create -n &lt;environment-name&gt; python=3.10 . IBDCluster requires the python version to be &gt;= 3.10 because it uses features that were introduced in that release. If you try to run it in python=3.9 it will give many errors. If you are not using poetry to install dependencies then you can skip step 2 and just move onto step 3. ",
    "url": "/documentation/github.html#step-2-create-and-activate-a-conda-virtual-environment",
    "relUrl": "/documentation/github.html#step-2-create-and-activate-a-conda-virtual-environment"
  },"16": {
    "doc": "Github Installation",
    "title": "Step 3: install all the dependencies using Conda or Poetry:",
    "content": ". ",
    "url": "/documentation/github.html#step-3-install-all-the-dependencies-using-conda-or-poetry",
    "relUrl": "/documentation/github.html#step-3-install-all-the-dependencies-using-conda-or-poetry"
  },"17": {
    "doc": "Github Installation",
    "title": "Step 4: Add the program to you PATH so that you can call the program:",
    "content": ". ",
    "url": "/documentation/github.html#step-4-add-the-program-to-you-path-so-that-you-can-call-the-program",
    "relUrl": "/documentation/github.html#step-4-add-the-program-to-you-path-so-that-you-can-call-the-program"
  },"18": {
    "doc": "Github Installation",
    "title": "Github Installation",
    "content": " ",
    "url": "/documentation/github.html",
    "relUrl": "/documentation/github.html"
  },"19": {
    "doc": "Home",
    "title": "Welcome to the IBDCluster Documentation!",
    "content": ". IBDCluster is a CLI python program designed to utilize IBD sharing within BioBanks to cluster individuals and then perform phenotypic enrichment tests for each cluster. This project is maintained by the Below Laboratory in the Vanderbilt Genetics Department. ",
    "url": "/#welcome-to-the-ibdcluster-documentation",
    "relUrl": "/#welcome-to-the-ibdcluster-documentation"
  },"20": {
    "doc": "Home",
    "title": "Goal behind this website documentation:",
    "content": ". This website serves as one of the documentation sources for the IBDCluster project. This documentation is not meant to be technically documentation, meaning it will not necessary explain all of the models used, nor the relationship between class, etc. Instead it is meant to be geared to people who wish to install and run the program. If you wish to contribute to the software or understand the more technical design of the project then wed would encourage you to view the github README which has more technical details. ",
    "url": "/#goal-behind-this-website-documentation",
    "relUrl": "/#goal-behind-this-website-documentation"
  },"21": {
    "doc": "Home",
    "title": "Contact:",
    "content": ". If you have any questions about IBDCluster, you can either post an issue on the Github issues page or you can contact us at the email address, insert email here. ",
    "url": "/#contact",
    "relUrl": "/#contact"
  },"22": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"23": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": "The links below have information about how to install the program and how to run the program . ",
    "url": "/documentation/",
    "relUrl": "/documentation/"
  },"24": {
    "doc": "Example Scripts",
    "title": "Example Scripts",
    "content": "The links below give examples of how to use the program. ",
    "url": "/examples/",
    "relUrl": "/examples/"
  },"25": {
    "doc": "Inputs",
    "title": "Inputs",
    "content": "When using IBDCluster the user is expected to provide several input files. These are the . ",
    "url": "/documentation/inputs.html",
    "relUrl": "/documentation/inputs.html"
  },"26": {
    "doc": "Installation",
    "title": "Installing IBDCluster:",
    "content": "This program can be installed through several different options which are listed below. Click on the links to find out more information. ",
    "url": "/documentation/installation.html#installing-ibdcluster",
    "relUrl": "/documentation/installation.html#installing-ibdcluster"
  },"27": {
    "doc": "Installation",
    "title": "Installation",
    "content": " ",
    "url": "/documentation/installation.html",
    "relUrl": "/documentation/installation.html"
  },"28": {
    "doc": "Pip Installation",
    "title": "Using Pip to install IBDCluster:",
    "content": "Coming soon . This installation method is not yet implemented but is planned to be part of a future release . ",
    "url": "/documentation/pip.html#using-pip-to-install-ibdcluster",
    "relUrl": "/documentation/pip.html#using-pip-to-install-ibdcluster"
  },"29": {
    "doc": "Pip Installation",
    "title": "Pip Installation",
    "content": " ",
    "url": "/documentation/pip.html",
    "relUrl": "/documentation/pip.html"
  },"30": {
    "doc": "Stock Plugins",
    "title": "Stock plugins:",
    "content": ". ",
    "url": "/documentation/stock_plugins.html#stock-plugins",
    "relUrl": "/documentation/stock_plugins.html#stock-plugins"
  },"31": {
    "doc": "Stock Plugins",
    "title": "Stock Plugins",
    "content": " ",
    "url": "/documentation/stock_plugins.html",
    "relUrl": "/documentation/stock_plugins.html"
  }
}
